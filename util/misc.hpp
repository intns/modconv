#ifndef _MISC_HPP
#define _MISC_HPP

#include <algorithm>
#include <filesystem>
#include <fstream>
#include <iomanip>
#include <optional>
#include <sstream>
#include <string>
#include <types.hpp>
#include <vector>

namespace util {
static void ExitHook()
{
	std::cout << "Press enter to exit";
	((void)std::getchar());
}

static const u32 CalculateTxeSize(u32 format, u32 x, u32 y)
{
	switch (format) {
	case 0:
	case 2:
	case 6:
		return 2 * y * x;
	case 1:
		return 4 * (y * x / 8);
	case 3:
		return y * x / 2;
	case 4:
	case 5:
	case 8:
	case 9:
		return y * x;
	case 7:
		return 4 * y * x;
	default:
		return 0;
	}
}

static inline bool IsAnagramOf(std::string a, std::string b)
{
	std::sort(a.begin(), a.end(), std::less<char>());
	std::sort(b.begin(), b.end(), std::less<char>());
	return a == b;
}

static std::optional<std::vector<std::string>> IsAnagramOfList(std::string anagram, std::vector<std::string>& possibleCandidates)
{
	std::vector<std::string> foundAnagrams = {};

	for (std::string& candidate : possibleCandidates) {
		if (IsAnagramOf(anagram, candidate)) {
			foundAnagrams.push_back(candidate);
		}
	}

	if (foundAnagrams.size() > 0) {
		return foundAnagrams;
	}

	return std::nullopt;
}

static bool DumpFileToCppHeader(std::string originalFile)
{
	std::ifstream file(originalFile, std::ios_base::binary);
	if (!file.is_open()) {
		std::printf("File was unable to be opened\n");
		return false;
	}

	std::size_t size = static_cast<std::size_t>(std::filesystem::file_size(originalFile));
	std::unique_ptr<u8> filecontents(new u8[size]);
	file.read((char*)filecontents.get(), size);

	// Replace non-alphabet characters with _
	std::replace_if(
	    originalFile.begin(), originalFile.end(), [](char c) { return !isalpha(c); }, '_');

	std::ostringstream contents;
	contents << "#include <types.hpp>\n\n// Generated by UTIL-LIB\nconstexpr u8 " << originalFile << "[] = {\n";

	for (std::uintmax_t i = 0; i < size; i++) {
		if (i == 0) {
			contents << "\t";
		} else if (!(i % 0xC)) {
			contents << "\n\t";
		}

		contents << "0x" << std::hex << (static_cast<u32>(*(filecontents.get() + i)))
		         << ((i == static_cast<unsigned long long>(size) - 1) ? "\n" : ", ");
	}
	contents << "};\nconstexpr std::uintmax_t " << originalFile << "_SIZE = sizeof(" << originalFile << ");\n";

	std::ofstream out(originalFile + ".hpp");
	out.write(contents.str().c_str(), contents.str().size());
	out.close();

	return true;
}

} // namespace util

#endif